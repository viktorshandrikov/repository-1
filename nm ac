#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>

typedef struct
{
	float* pMas;
	int string;
	int column;
}Matrix_N_M;

Matrix_N_M CreateMatrix(int N, int M)
{
	Matrix_N_M X;
	int size;

	X.string = N;
	X.column = M;
	size = X.string * X.column;

	X.pMas = malloc(sizeof(float) * size);

	return X;
}

Matrix_N_M InitMatrixWithRandom(int N, int M)
{
	Matrix_N_M X;
	int i, j, k = 0, q;
	X = CreateMatrix(N, M);
	srand(time(NULL));
	for (i = 0;i < X.string;i++)
	{
		for (j = 0;j < X.column;j++)
		{
			q = rand()/320;
			*(X.pMas + k) = q;
			k++;
		}
	}

	return X;
}

Matrix_N_M GetMatrixFromFile(FILE* file)
{
	Matrix_N_M X;
	int i, q = 0, N, M, size;

	fscanf_s(file, "%d" "%d", &N, &M);
	X = CreateMatrix(N, M);
	size = X.string * X.column;
	for (i = 0;i < size;i++)
	{
		fscanf_s(file, "%d", &q);
		*(X.pMas + i) = (float)q;
	}

	return X;
}

void PrintMatrix(Matrix_N_M X) 
{
	int i, j, k = 0;
	for (i = 0;i < X.string;i++)
	{
		for (j = 0;j < X.column;j++)
		{
			printf("%f\t", *(X.pMas + k));
			k++;
		}
		printf("\n");
	}
	printf("\n");
}

Matrix_N_M Sum(Matrix_N_M X, Matrix_N_M Y)
{
	Matrix_N_M S;
	int N, M, i, j, k = 0;
	if (X.string == Y.string && X.column == Y.column)
	{
		S = CreateMatrix(X.string, X.column);
		for (i = 0;i < S.string;i++)
			for (j = 0;j < S.column;j++)
			{
				*(S.pMas + k) = *(X.pMas + k) + *(Y.pMas + k);
				k++;
			}
	}
	else
	{
		S = CreateMatrix(1, 1);
		*(S.pMas) = 0;
	}
	return S;
}

Matrix_N_M Multiply(Matrix_N_M X, Matrix_N_M Y)
{
	Matrix_N_M Mult;
	int N, M, i, j, k, t = 0;
	float s = 0;
	if (X.column == Y.string)
	{
		N = X.string;
		M = Y.column;
		Mult = CreateMatrix(N, M);
		for (i = 0;i < X.string;i++)
			for (j = 0;j < Y.column;j++)
			{
				for (k = 0;k < X.column;k++)
					s = s + (*(X.pMas + k + i * X.column)) * (*(Y.pMas + k * Y.column + j));
				*(Mult.pMas + t) = s;
				t++;
				s = 0;
			}
	}
	else
	{
		Mult = CreateMatrix(1, 1);
		*(Mult.pMas) = 0;
	}

	return Mult;
}

void GetMatrixWithoutStrAndCol(Matrix_N_M X, Matrix_N_M newX, int str, int col)
{
	int size, i, j, k = 0;
	int offsetStr = 0;
	int offsetCol = 0;
	size = X.string * X.column;
	for (i = 0;i < X.string - 1;i++)
	{
		if (i == str)
			offsetStr = 1;
		offsetCol = 0;
		for (j = 0;j < X.column - 1;j++)
		{
			if (j == col)
				offsetCol = 1;
			*(newX.pMas + k) = *(X.pMas + offsetCol + offsetStr * X.column + X.column * i + j);
			k++;
		}
	}
}

int Det(Matrix_N_M X)
{
	int det = 0, j, N;
	int degree = 1;
	if (X.string != X.column)
		return 0;
	else
	{
		if (X.string == 1)
			return *(X.pMas);
		else
		{
			if (X.string == 2)
				det = *(X.pMas) * (*(X.pMas + 3)) - *(X.pMas + 1) * (*(X.pMas + 2));
			else
			{
				Matrix_N_M newX; 
				N = X.string - 1; 
				newX = CreateMatrix(N, N);
				for (j = 0;j < X.column;j++)
				{
					GetMatrixWithoutStrAndCol(X, newX, 0, j);
					det = det + (degree * (*(X.pMas + j)) * Det(newX));
					degree = -degree;
				}
				free(newX.pMas);
			}
		}
	}
	return det;
}

Matrix_N_M Transposition(Matrix_N_M X)
{
	Matrix_N_M TrX;
	int i, j;
	TrX = CreateMatrix(X.string, X.column);
	for (i = 0;i < X.string;i++)
	{
		for (j = 0;j < X.column;j++)
		{
			if (j == i)
				*(TrX.pMas + i * TrX.column + j) = *(X.pMas + i * X.column + j);
			else
				*(TrX.pMas + j * TrX.column + i) = *(X.pMas + i * X.column + j);
		}
	}
	return TrX;
}

int AlgAdd(Matrix_N_M X, int str, int col)
{
	Matrix_N_M newX;
	int N, add = 0, znak = 1;
	if ((str + col) % 2 != 0)
	{
		znak = -znak;
	}
	N = X.string - 1;
	newX = CreateMatrix(N, N);
	GetMatrixWithoutStrAndCol(X, newX, str, col);
	add = znak * Det(newX); 
	return add;
}

Matrix_N_M InverseMatrix(Matrix_N_M X)
{
	Matrix_N_M InvX, AddX;
	int detX, i, j, k = 0, znak = 1;
	detX = Det(X);
	if (detX != 0)
	{
		InvX = CreateMatrix(X.string, X.column);
		AddX = CreateMatrix(X.string, X.column);
		for (i = 0;i < X.string;i++)
		{
			for (j = 0;j < X.column;j++)
			{
				*(AddX.pMas + k) = (float)(AlgAdd(X, i, j)) / detX;
				k++;
			}
		}
		InvX = Transposition(AddX);
	}
	else
	{
		InvX = CreateMatrix(1, 1);
		*(InvX.pMas) = 0;
	}
	return InvX;
}

void main()
{
	Matrix_N_M M1, M2, S, Mult, InvM1, InvM2, T;
	int detM1, detM2;
	int N_1, M_1, N_2, M_2;

	printf("Input N_1 - string of M1 and M_1 - column of M1:\n");
	scanf_s("%d" "%d", &N_1, &M_1);
	printf("Input N_2 - string of M2 and M_2 - column of M2:\n");
	scanf_s("%d" "%d", &N_2, &M_2);

	M1 = InitMatrixWithRandom(N_1, M_1);
	M2 = InitMatrixWithRandom(N_2, M_2);

	/*FILE* fileinit1 = fopen("inputmatrixnm1.txt", "r");
	FILE* fileinit2 = fopen("inputmatrixnm2.txt", "r");
	if (fileinit1 == NULL || fileinit2 == NULL)
	{
		printf("Error!");
		return;
	}

	M1 = GetMatrixFromFile(fileinit1);
	M2 = GetMatrixFromFile(fileinit2);*/
	S = Sum(M1, M2);
	Mult = Multiply(M1, M2); 
	detM1 = Det(M1);
	detM2 = Det(M2);
	InvM1 = InverseMatrix(M1);
	InvM2 = InverseMatrix(M2);
	T = Multiply(M1, InvM1);

	PrintMatrix(M1);
	PrintMatrix(M2);
	printf("Sum of Matrix:\n");
	PrintMatrix(S);
	printf("Multiplication of Matrix:\n");
	PrintMatrix(Mult);
	printf("DetM1 = %d\t DetM2 = %d\n", detM1, detM2);
	printf("Inverse Matrix M1:\n");
	PrintMatrix(InvM1);
	printf("Inverse Matrix M2:\n");
	PrintMatrix(InvM2);
	PrintMatrix(T);

	free(M1.pMas);
	free(M2.pMas);
	free(S.pMas);
	free(Mult.pMas);
	free(InvM1.pMas);
	free(InvM2.pMas);

	/*fclose(fileinit1);
	fclose(fileinit2);*/
}
