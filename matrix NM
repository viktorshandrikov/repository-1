#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <malloc.h>

#define qA(i,j) *(A.data + ((i) * A.M) + (j))
#define qB(i,j) *(B.data + ((i) * B.M) + (j))

#define INPUTA "inputA.txt"
#define INPUTB "inputB.txt"

typedef struct {
  float* data;
  int N, M;
} MatrixNxM;

void *InitMatrix(MatrixNxM *A, int N, int M, int random, FILE* file) {
  float* a;
  a = (float*)malloc((N * M) * sizeof(float));

  if (random == 0) {
    float temp;
    for (int i = 0; i < N; i++)
    {
      for (int j = 0; j < M; j++)
      { 
        fscanf_s(file, "%f", &temp);
        *(a + i * M + j) = temp;
      }
    }
  }
  else {
    for (int i = 0; i < N; i++)
    {
      for (int j = 0; j < M; j++)
      {
        *(a + i * M + j) = (float)(rand() - (RAND_MAX / 2)) / 1000;
      }
    }
  }
  A->data = a;
  A->N = N;
  A->M = M;
}

void printMatrix(MatrixNxM A, int deleting) {
  for (int i = 0; i < A.N; i++) {
    for (int j = 0; j < A.M; j++) {
      printf("%f\t", qA(i, j));
    }
    printf("\n");
  }
  if (deleting == 1) {
    free(A.data);
  }
}

MatrixNxM matriSumm(MatrixNxM A, MatrixNxM B) {
  MatrixNxM C;
  int N = A.N;
  int M = A.M;

  float* a;
  a = (float*)malloc(N * M * sizeof(float));

  for (int i = 0; i < N; i++) {
    for (int j = 0; j < M;j++) {
      *(a + i * M + j) = qA(i, j) + qB(i, j);
    }
  }
  C.data = a;
  C.N = N;
  C.M = M;
  return C;
}

MatrixNxM matriMult(MatrixNxM A, MatrixNxM B) {
  MatrixNxM C;
  int N = A.N;
  int M = B.M;

  float* a;
  a = (float*)malloc((M * N) * sizeof(float));

  float temp;

  for (int i = 0; i < N; i++) {
    for (int j = 0; j < M;j++) {
      temp = 0.0;
      for (int r = 0; r < A.M;r++) {
        temp += qA(i, r) * qB(r, j);
      }
      *(a + i * M + j) = temp;
    }
  }
  C.data = a;
  C.N = N;
  C.M = M;
  return C;
}

MatrixNxM MatriMinor(MatrixNxM A, int line, int row) {
  MatrixNxM C;
  int N = A.N;
  int M = A.M;

  float* a;
  a = (float*)malloc(((M-1) * (N-1)) * sizeof(float));

  float temp;
  for (int i = 0; i < N - 1; i++) {
    for (int j = 0; j < M - 1;j++) {
      if (i < line) {
        if (j < row) {

          temp = qA(i, j);
        }
        else {
          temp = qA(i, j + 1);
        }
      }
      else {
        if (j < row) {
          temp = qA(i + 1, j);
        }
        else {
          temp = qA(i + 1, j + 1);
        }
      }
      *(a + (i * (M - 1) + j)) = temp;
    }
  }
  C.data = a;
  C.N = N - 1;
  C.M = M - 1;
  return C;
}

float det(MatrixNxM A) {
  int N = A.N;
  int M = A.M;
  MatrixNxM T;
  T.N = N - 1;
  T.M = M - 1;
  
  if (N == 1 && M == 1) return *A.data;

  float ans = 0;
  int n = 1;
  for (int j = 0; j < N; j++) {
    T = MatriMinor(A, 0, j);
    ans += qA(0, j) * det(T) * n;
    n = -1 * n;
    free(T.data);
  }
  return ans;
}

MatrixNxM MatriRev(MatrixNxM A) {
  MatrixNxM C;
  int N = A.N;
  int M = A.M;
  MatrixNxM T;
  T.N = N - 1;
  T.M = M - 1;
  float detA = det(A);

  float* a;
  a = (float*)malloc((M * N) * sizeof(float));

  float temp;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < M;j++) {
      T = MatriMinor(A, j, i);
      temp = det(T) / detA;
      if ((i + j) % 2 == 1) {
        temp = -temp;
      }
      free(T.data);
      *(a + (i * M + j)) = temp;
    }
  }
  C.data = a;
  C.N = N;
  C.M = M;
  return C;
}

void printresults(MatrixNxM A, MatrixNxM B) {
  int Na = A.N;
  int Ma = A.M;
  int Nb = B.N;
  int Mb = B.M;
  printf("\nMatrix A+B:\n");
  if (Na == Nb && Ma == Mb) printMatrix(matriSumm(A, B), 1);
  else printf("Cannot add\n");
  printf("\nMatrix A*B:\n");
  if (Ma == Nb) printMatrix(matriMult(A, B), 1);
  else printf("Cannot multiply\n");
  printf("\ndetA:\n");
  if (Na == Ma) printf("%f\n", det(A));
  else printf("Cannot be found\n");
  printf("\ndetB:\n");
  if (Nb == Mb) printf("%f\n", det(B));
  else printf("Cannot be found\n");
}
void printreverse(MatrixNxM A, MatrixNxM B) {
  MatrixNxM RA, RB;
  int Na = A.N;
  int Ma = A.M;
  int Nb = B.N;
  int Mb = B.M;
  printf("\n Reverse A:\n");
  if (fabs(det(A)) > 0.0001) {
    RA.N = Na;
    RA.M = Ma;
    RA = MatriRev(A);
    printMatrix(RA, 0);
    printf("\nCheck:\n");
    printMatrix(matriMult(A, RA), 1);
    free(RA.data);
  }
  else printf("Cannot be found\n");
  printf("\n Reverse B:\n");
  if (fabs(det(B)) > 0.0001) {
    RB.N = Nb;
    RB.M = Mb;
    RB = MatriRev(B);
    printMatrix(RB, 0);
    printf("\nCheck:\n");
    printMatrix(matriMult(B, RB), 1);
    free(RB.data);
  }
  else printf("Cannot be found\n");
}

int ask_input(char input[]) {
  int ans;
  printf("Would you like for matrix to be random or to be from file %s? 1 - random, 2 - from file\n", input);
  scanf_s("%d", &ans);
  ans = 2 - ans;
  return ans;
}

void main() {
  FILE * inputA, * inputB;
  MatrixNxM A, B;
  int Na, Nb, Ma, Mb;
  
  printf("Working with matrixes of unknown size\nPlease input Na and Ma\n");
  scanf_s("%d%d", &Na, &Ma);
  fopen_s(&inputA, INPUTA, "r");
  InitMatrix(&A, Na, Ma, ask_input(INPUTA), inputA);
  int fclose(FILE * inputA);
  printf("Please input Nb and Mb\n");
  scanf_s("%d%d", &Nb, &Mb);
  fopen_s(&inputB, INPUTB, "r");
  InitMatrix(&B, Nb, Mb, ask_input(INPUTB), inputB);
  int fclose(FILE * inputB);
  printf("\nMatrix A:\n");
  printMatrix(A, 0);
  printf("\nMatrix B:\n");
  printMatrix(B, 0);
  
  printresults(A, B);
  printreverse(A, B);
  
  free(A.data);
  free(B.data);
}
